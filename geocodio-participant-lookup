/**
* This script is used to determine whether event participants live in urban or rural areas by using the Geocod.io API.
*
* It requires an API key from Geocod.io to function.
*
* The following Airtable fields are required to be present in the "Participants" table:
* - "Street Address"
* - "City"
* - "State/Province"
* - "Postal Code"
* - "Country"
*
* The script first retrieves all records from the "Participants" table, then for each record, it retrieves the geolocation data from Geocod.io by sending a request to the API with the "Full Address String" field as the address parameter.
* It then extracts the relevant data from the Geocod.io API response and updates the Airtable record with the following fields, which must also exist and be blank:
* - "Geocodio - Source"
* - "Geocodio - City"
* - "Geocodio - State"
* - "Geocodio - Country"
* - "Geocodio - Zip"
* - "Geocodio - Address String"
* - "Geocodio - Lat"
* - "Geocodio - Long"
* - "Geocodio - Accuracy"
* - "Geocodio - MSA Name"
* - "Geocodio - MSA Type"
* - "Geocodio - CSA Name"
*
* By reviewing a record's Metropolitan Statistical Area (MSA) and/or Combined Statistical Area (CSA), you can determine whether they live in an urban or rural area.
*
*/

function getNestedValue(obj, path) {
    let current = obj;
    path.forEach(key => {
        if (current && current.hasOwnProperty(key)) {
            current = current[key];
        } else {
            current = null;
        }
    });
    return current;
}

let geocodioApikey = 'XXX';
let table = base.getTable("Participants");
let view = table.getView("Geocoding Pending");
let query = await view.selectRecordsAsync();

for (let record of query.records) {
    let participantStreetAddress = record.getCellValueAsString("Street Address");
    let participantCity = record.getCellValueAsString("City");
    let participantState = record.getCellValueAsString("State/Province");
    let participantZip = record.getCellValueAsString("Postal Code");
    let participantCountry = record.getCellValueAsString("Country");
    let participantAddress = "";
    if (!participantStreetAddress && !participantCity && !participantState && !participantZip) {
        console.log("Skipping record because all address fields are blank: ", participantAddress);
        continue;
    }
    if(participantCountry.toLowerCase() != "united states" && participantCountry.toLowerCase() != "us" && participantCountry != ""){
        console.log("Skipping record because country is not United States or US: ", participantAddress);
        continue;
    }
    if (participantStreetAddress) {
        participantAddress += `${participantStreetAddress},`;
    }
    if (participantCity) {
        participantAddress += `${participantCity},`;
    }
    if (participantState) {
        participantAddress += `${participantState},`;
    }
    if (participantZip) {
        participantAddress += `${participantZip},`;
    }
    if (participantCountry) {
        participantAddress += `${participantCountry}`;
    }
    
    let url = `https://api.geocod.io/v1.7/geocode?api_key=${geocodioApikey}&fields=census2010`;

    if (participantStreetAddress) {
        url += `&street=${participantStreetAddress}`;
    }
    if (participantCity) {
        url += `&city=${participantCity}`;
    }
    if (participantState) {
        url += `&state=${participantState}`;
    }
    if (participantZip) {
        url += `&postal_code=${participantZip}`;
    }

    let response = await remoteFetchAsync(url);
    let apiResult = await response.json();

        /**
         * This portion of the script is handling cases where the initial geocoding request
         * using the City, State/Province, Postal Code, and Country fields returns an error from the API.
         * If all attempts fail, the script will log the error and move on to the next record.
         */
        
    let results = apiResult.results[0];
    console.log(results);
    
    if (apiResult.error) {
    console.log("Error geocoding address:", apiResult.error);
    continue;
    } else if (apiResult.results.length > 0) {
    // do something with the results
    } else {
    console.log("No results found for address: ", participantAddress);
    }
    
    let combined_statistical_area = getNestedValue(results, ['fields', 'census', '2010', 'combined_statistical_area', 'name']);
    let source = getNestedValue(results, ['source']);
    let city = getNestedValue(results, ['address_components', 'city']);
    let state = getNestedValue(results, ['address_components', 'state']);
    let country = getNestedValue(results, ['address_components', 'country']);
    let zip = getNestedValue(results, ['address_components', 'zip']);
    let formatted_address = getNestedValue(results, ['formatted_address']);
    let lat = getNestedValue(results, ['location', 'lat']);
    let lng = getNestedValue(results, ['location', 'lng']);
    let accuracy = getNestedValue(results, ['accuracy']);
    let msa_name = getNestedValue(results, ['fields', 'census', '2010', 'metro_micro_statistical_area', 'name']);
    let msa_type = getNestedValue(results, ['fields', 'census', '2010', 'metro_micro_statistical_area', 'type']);

    await table.updateRecordAsync(record, {
    "Geocodio - Source": source,
    "Geocodio - City": city,
    "Geocodio - State": state,
    "Geocodio - Country": country,
    "Geocodio - Zip": zip, 
    "Geocodio - Address String": formatted_address,
    "Geocodio - Lat": lat,
    "Geocodio - Long": lng,
    "Geocodio - Accuracy": accuracy,
    "Geocodio - MSA Name": msa_name,
    "Geocodio - MSA Type": msa_type,
    "Geocodio - CSA Name": combined_statistical_area,
    });
}  
